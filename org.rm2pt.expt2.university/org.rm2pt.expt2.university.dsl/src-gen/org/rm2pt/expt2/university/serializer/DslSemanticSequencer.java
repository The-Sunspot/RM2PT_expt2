/*
 * generated by Xtext 2.25.0
 */
package org.rm2pt.expt2.university.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.rm2pt.expt2.university.metamodel.university.School;
import org.rm2pt.expt2.university.metamodel.university.Student;
import org.rm2pt.expt2.university.metamodel.university.Teacher;
import org.rm2pt.expt2.university.metamodel.university.University;
import org.rm2pt.expt2.university.metamodel.university.UniversityPackage;
import org.rm2pt.expt2.university.services.DslGrammarAccess;

@SuppressWarnings("all")
public class DslSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private DslGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == UniversityPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case UniversityPackage.SCHOOL:
				sequence_School(context, (School) semanticObject); 
				return; 
			case UniversityPackage.STUDENT:
				sequence_Student(context, (Student) semanticObject); 
				return; 
			case UniversityPackage.TEACHER:
				sequence_Teacher(context, (Teacher) semanticObject); 
				return; 
			case UniversityPackage.UNIVERSITY:
				sequence_University(context, (University) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     School returns School
	 *
	 * Constraint:
	 *     (name=EString sid=EInt? (containPerson+=Person containPerson+=Person*)?)
	 */
	protected void sequence_School(ISerializationContext context, School semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Person returns Student
	 *     Student returns Student
	 *
	 * Constraint:
	 *     (name=EString id=EString? studyIn=[School|EString] follow+=[Teacher|EString] follow+=[Teacher|EString]*)
	 */
	protected void sequence_Student(ISerializationContext context, Student semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Person returns Teacher
	 *     Teacher returns Teacher
	 *
	 * Constraint:
	 *     (name=EString id=EString? (workIn+=[School|EString] workIn+=[School|EString]*)? (teach+=[Student|EString] teach+=[Student|EString]*)?)
	 */
	protected void sequence_Teacher(ISerializationContext context, Teacher semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     University returns University
	 *
	 * Constraint:
	 *     (name=EString (contain+=School contain+=School*)?)
	 */
	protected void sequence_University(ISerializationContext context, University semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
